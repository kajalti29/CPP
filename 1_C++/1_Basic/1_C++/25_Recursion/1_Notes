; Recursion ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
üëâ ‡§ú‡§¨ ‡§ï‡•ã‡§à function ‡§ñ‡•Å‡§¶ ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§â‡§∏‡•á recursion ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§Æ‡§§‡§≤‡§¨, function ‡§Ö‡§™‡§®‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§∏‡•á ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ú‡§¨ ‡§§‡§ï ‡§ï‡•ã‡§à base condition ‡§®‡§æ ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡•§ans



; Qun 2. Difference between recursion and iteration?

üëâ Recursion ‡§Æ‡•á‡§Ç function ‡§ñ‡•Å‡§¶ ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, iteration ‡§Æ‡•á‡§Ç loops use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
Recursion memory ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ consume ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, iteration fast ‡§î‡§∞ memory-efficient ‡§π‡•à‡•§



; Recursive function examples
1. Factorial: n * factorial(n-1)
2. Fibonacci: f(n-1) + f(n-2)
3. Sum of digits: sum(n/10) + (n%10)

..................................................................................................................

return_type function_name(parameters) {
    
    // 1Ô∏è‚É£ Base Case: recursion ko rokne ke liye
    if (condition) {
        return value; // ya kuch kaam nahi karna
    }

    // 2Ô∏è‚É£ Recursive Case: function khud ko call kare chhoti problem ke saath
    return function_name(smaller_problem); // ya koi calculation ke saath

}
















